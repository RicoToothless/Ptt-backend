name: go

on:
  issue_comment:
    types: [created]

jobs:
  # lint:
  #   strategy:
  #     matrix:
  #       platform: [ubuntu-20.04]
  #       go-version: [1.14.x]
  #   runs-on: ${{ matrix.platform }}
  #   name: Linters (Static Analysis) for Go
  #   env:
  #     GOBIN: /tmp/.bin
  #   steps:
  #     - name: Checkout code into the Go module directory.
  #       uses: actions/checkout@v2

  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ${{ matrix.go-version }}

  #     - uses: actions/cache@v1
  #       with:
  #         path: ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

  #     - name: Linting & vetting.
  #       run: ./make.bash lint

  deploy-check:
    runs-on: ubuntu-20.04
    steps:
      - name: acknowledge deployment request to commenter
        id: check
        uses: khan/pull-request-comment-trigger@master
        with:
          trigger: "rebuild"
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}

  test:
    needs: deploy-check
    if: needs.deploy-check.outputs.triggered == 'true'
    strategy:
      matrix:
        platform: [ubuntu-20.04, macos-latest, windows-latest]
        go-version: [1.14.x]
    runs-on: ${{ matrix.platform }}
    name: integration tests
    env:
      GOBIN: /tmp/.bin
    steps:
      - name: Install Go.
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code into the Go module directory.
        uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      # - name: Run tests
      #   run: ./make.bash test-integration
      - name: test
        run: go test -v ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        with:
          file: coverage.out
